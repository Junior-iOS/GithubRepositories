//
//  PullRequestsListInteractor.swift
//  GithubRepositories
//
//  Created by Junior Silva on 21/07/20.
//  Copyright (c) 2020 Junior Silva. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE

import UIKit

protocol PullRequestsListBusinessLogic {
    func fetchPullRequestsList()
    func didSelectRow(at index: Int)
    var numberOfRows: Int { get }
    func cellForRow(at index: Int) -> PullRequestsList.ViewModel
}

protocol PullRequestsListDataStore {
    var repository: Repository? { get set }
}

class PullRequestsListInteractor: PullRequestsListBusinessLogic, PullRequestsListDataStore {
    var presenter: PullRequestsListPresentationLogic?
    var worker: PullRequestsListWorker?
    
    var repository: Repository?
    var pullRequests: [PullRequestsList.RequestList] = []
    
    init(worker: PullRequestsListWorker = PullRequestsListWorker()) {
        self.worker = worker
    }
    
    func didSelectRow(at index: Int) {
        openGithubPage(at: index)
    }
    
    var numberOfRows: Int {
        pullRequests.count
    }
    
    func cellForRow(at index: Int) -> PullRequestsList.ViewModel {
        let pullRequest = pullRequests[index]
        return PullRequestsList.ViewModel(pullRequest: pullRequest)
    }
    
    func fetchPullRequestsList() {
        guard let selectedRepository = repository else { return }
        worker?.searchPullRequestsList(selectedRepository).done(handleSuccess).catch(handleError).finally {
            self.presenter?.stopActivityIndicator()
            self.presenter?.reloadTable()
        }
    }
    
    private func handleSuccess(_ response: [PullRequestsList.RequestList]) {
        guard let repo = repository else { return }
        pullRequests = response
        pullRequests.isEmpty ? presenter?.presentEmptyState() : presenter?.presentRequestOwner(repo)
    }
    
    private func handleError(_ error: Error) {
        print(error.localizedDescription)
    }
    
    private func openGithubPage(at index: Int) {
        presenter?.presentGithubPageFor(pullRequests[index].html)
    }
    
}
