//
//  RepositoriesListInteractor.swift
//  GithubRepositories
//
//  Created by Junior Silva on 21/07/20.
//  Copyright (c) 2020 Junior Silva. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE

import UIKit

protocol RepositoriesListBusinessLogic {
    func loadRepositoriesList(_ page: Int)
    func requestNextPage(index: Int)
    
    func didSelectRow(at index: Int)
    var numberOfRows: Int { get }
    func cellForRow(at index: Int) -> RepositoriesList.ViewModel?
}

protocol RepositoriesListDataStore {
    var repository: Repository? { get set }
}

class RepositoriesListInteractor: RepositoriesListBusinessLogic, RepositoriesListDataStore {
    var presenter: RepositoriesListPresentationLogic?
    var worker: RepositoriesListWorker?
    
    var repository: Repository?
    var repositories = [Repository]()
    var currentPage: Int = 1
    var pageSize: Int = 25
    
    init(worker: RepositoriesListWorker = RepositoriesListWorker()) {
        self.worker = worker
    }
    
    func didSelectRow(at index: Int) {
        guard index >= 0 && index < numberOfRows else { return }
        repository = repositories[index]
        presenter?.presentPullRequestsList()
    }
    
    var numberOfRows: Int {
        repositories.count
    }
    
    func cellForRow(at index: Int) -> RepositoriesList.ViewModel? {
        let repository = repositories[index]
        return RepositoriesList.ViewModel(repository: repository)
    }
    
    func loadRepositoriesList(_ page: Int) {
        worker?.searchRepositoriesList(page: page).done(handleSuccess).catch(handleError).finally {
            self.presenter?.stopsActivityIndicator()
        }
    }
    
    private func handleSuccess(_ response: RepositoriesList.Response) {
        guard let repositoriesResponse = response.repositories else { return }
        repositories = repositoriesResponse
        presenter?.reloadTableView()
    }
    
    private func handleError(_ error: Error) {
        
    }
    
    func requestNextPage(index: Int) {
        let targetCount = currentPage < 0 ? 1 : currentPage * pageSize - 10
        if index != targetCount { return }
        currentPage += 1
        loadRepositoriesList(currentPage)
    }
}
